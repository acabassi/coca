% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/silhouette.R
\name{maximiseSilhouette}
\alias{maximiseSilhouette}
\title{Choose K that maximises the silhouette from a set of kernel matrices and clusterings}
\usage{
maximiseSilhouette(kernelMatrix, clLabels, maxK, savePNG = FALSE,
  fileName = "silhouette", isDistance = FALSE, widestGap = FALSE,
  dunns = FALSE, dunn2s = FALSE)
}
\arguments{
\item{kernelMatrix}{N X N X (maxK-1) array of kernel matrices.}

\item{clLabels}{(maxK-1) X N matrix containing the clusterings obtained for different values of K}

\item{maxK}{Maximum number of clusters considered.}

\item{savePNG}{If TRUE, a plot of the silhouette is saved in the working folder. Defaults to FALSE.}

\item{fileName}{If savePNG is TRUE, this is the name of the png file.}

\item{isDistance}{Boolean. If TRUE, the kernel matrices are interpreted as matrices of distances, otherwise as
matrices of similarities.}

\item{widestGap}{Boolean. If TRUE, also computes widest gap index (and plots it if savePNG is TRUE).}

\item{dunns}{Boolean. If TRUE, also computes Dunn's index: minimum separation / maximum diameter (and plots it if
savePNG is TRUE).}

\item{dunn2s}{Boolean. If TRUE, also computes an alternative version of Dunn's index: minimum average dissimilarity
between two cluster / maximum average within cluster dissimilarity (and plots it if savePNG is TRUE).}
}
\value{
The function returns a list containing `silh`, a vector of length maxK-1 such that
silh[i] is the silhouette for K = i+1, and `K`, the lowest number of clusters for which the
silhouette is maximised.
}
\description{
Choose K that maximises the silhouette from a set of kernel matrices and clusterings
}
\examples{
data <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))

cm_2cl <- consensusCluster(data, 2)
cm_3cl <- consensusCluster(data, 3)

km <- array(NA, c(300, 300, 2))
km[,,1] <- klic::spectrumShift(cm_2cl, coeff = 1.1)
km[,,2] <- klic::spectrumShift(cm_3cl, coeff = 1.1)

clLabels <- array(NA, c(2,300))

# Use kernel k-means to divide data into two clusters
parameters_kkmeans <- list()
parameters_kkmeans$cluster_count <- 2
kkm <- klic::kkmeans(km[,,1], parameters_kkmeans) # km[,,1] because 2 is the first number we try
clLabels[1,] <- kkm$clustering

# Use kernel k-means to divide data into three clusters
parameters_kkmeans$cluster_count <- 3
kkm <- klic::kkmeans(km[,,2], parameters_kkmeans) # km[,,2] because 3 is the second number we try
clLabels[2,] <- kkm$clustering

# Call maximiseSilhouette function
maxSil <- maximiseSilhouette(km, clLabels, maxK = 3)
# The output of maximiseSilhouette contains:
# * the values of the average silhoeutte for each number of clusters
print(maxSil$silhouette)
# * the number of clusters that maximises the average silhouette
# (if more than one value for the number of clusters k maximises the silhouette,
# all the such values are reported in the output)
print(maxSil$k)
}
\author{
Alessandra Cabassi \email{ac2051@cam.ac.uk}
}
